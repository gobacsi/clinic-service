# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: node:18
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: 'clinic' 
          POSTGRES_USER: 'clinic_user'
          POSTGRES_PASSWORD: '123456'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      # Runs a set of commands using the runners shell
      - name: Build and Test
        run: |
          npm install --quiet
          npm run format
          npm run build
          npm run test
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: test
    outputs:
      IMAGE: ${{ steps.docker_images.outputs.IMAGE }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Docker ECR
        # You may pin to the exact commit or the version.
        # uses: appleboy/docker-ecr-action@174bc7ab545bf5c4f4492240c4d839a987643559
        uses: appleboy/docker-ecr-action@v0.0.3
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY }}
          secret_key: ${{ secrets.AWS_SECRET_KEY }}
          registry: ${{ vars.REGISTRY_URL }}
          region: ap-southeast-1
          repo: ${{ github.event.repository.name }}
          tags: ${{ github.sha }}
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: ssh pipelines
        uses: cross-the-world/ssh-pipeline@master
        env:
          WELCOME: "ssh pipeline"
        with:
          host: ${{ secrets.SSH_HOST }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          connect_timeout: 10s
          script: |
            IMAGE=${{ vars.REGISTRY_URL }}/${{ github.event.repository.name }}:${{ github.sha }}
            aws ecr get-login-password | docker login --username AWS --password-stdin ${{ vars.REGISTRY_URL }}
            aws s3api get-object --bucket gobacsi-env --key $S3_ENV_PATH ${{ vars.REMOTE_ENV }}
            docker rm -f dev-clinic-service
            docker run -e START_COMMAND=start --env-file ${{ vars.REMOTE_ENV }} --name dev-clinic-service -p 3000:3000 -d "${IMAGE}"
